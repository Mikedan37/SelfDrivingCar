/*  TITLE: SELF DRIVING CAR :)
    CLASS: INTRO TO ENGINEERING
           SUMMER QUARTER 2022
    NAMES: MICHAEL DANYLCHUK
           - FUTURE QUANTUM ENGINEER
           ISHAAN PATEL
           - FUTURE ROCKET ENGINEER

    THE PURPOSE OF THIS PROJECT IS TO PROGRAM AN ARDUINO TO SELF DRIVE USING 4
    DC MOTORS AND AN ULTRASONIC SENSOR. 
*/


//DEFINING MOTER INPUTS Ports: 3,5,6,9
//Front left
#define MOTOR_IN1     3
//Front right
#define MOTOR_IN2     5
//Back left
#define MOTOR_IN3     6
//Back right
#define MOTOR_IN4     9

// DEFINIG ULTRASONIC SENSOR TRIG port: 10
#define ULTRASONIC_SENSOR_IN 10

// DEFINING ULTRASONIC SENSOR ECHO port: 13
#define ULTRASONIC_SENSOR_OUT 13

// SPEED DEFINITIONS
#define stop   0
#define slow   64
#define normal 128
#define fast   255

// SPEED VARIABLE
int Speed;

int diameter;
int circumference;

// THIS METHOD SETS UP THE ARDUINO
void setup() {
  // setup code, to run once:
  Serial.begin(9600);
  Serial.println("L293D DC motor test");

  pinMode(MOTOR_EN_1_2, OUTPUT);
  pinMode(MOTOR_EN_3_4, OUTPUT)
  pinMode(MOTOR_IN1, OUTPUT);
  pinMode(MOTOR_IN2, OUTPUT);
  pinMode(MOTOR_IN3, OUTPUT);
  pinMode(MOTOR_IN4, OUTPUT);
  pinMode(ULTRASONIC_SENSOR_IN, INPUT);
  pinMode(ULTRASONIC_SENSOR_OUT, OUTPUT);
}

// THIS METHOD SETS UP THE LOOP TO CONTINUE ARDUINO RUNNING
void loop() {
  // main code, to run repeatedly:
 
}

//THIS METHOD CHECKS THE SIGNAL OUTPUT OF THE ULTRASONIC SENSOR
void UltrasonicSensorSignalCheck(void){
  signal = analogRead(ULTRASONIC_SENSOR_IN);
  on = digitalRead(ULTRASONIC_SENSOR_IN);
  if(signal == on){
    ResponseToUltrasonicSensorSignalCheck();
  }
}

//THIS METHOD GIVES INSTRUCTIONS FOR CAR IF ULTRASONIC SENSOR SENSES OBSTICAL
/* 
                    /\
                    ||
                --->||   
             /\ |----------|
             || |          |
             || |__________|
              <--- (car)
*/
void ResponseToUltrasonicSensorSignalCheck(void){
  turnLeft();
  moveForward_rev();
  turnRight();
  moveForward_rev();
  turnRight();
  moveForward_rev();
  turnLeft();
}

//  THIS METHOD MAKES THE CAR BREAK
/*
          ________
        /.         \
       /    STOP    \
      |.   (car)    |
       \.          /
        \_________/
*/
void Brake(void){
  analogWrite(MOTOR_IN1, stop);
  analogWrite(MOTOR_IN2, stop);
  analogWrite(MOTOR_IN3, stop);
  analogWrite(MOTOR_IN4, stop);
}

// THIS METHOD MAKES THE CAR MOVE FORWARD
/*
               /\
               ||
               ||
              (car)
*/
void moveForward_Rev(void){
  analogWrite(MOTOR_EN_1_2, Speed);
  analogWrite(MOTOR_EN_3_4, Speed);
  analogWrite(MOTOR_IN1, HIGH);
  analogWrite(MOTOR_IN2, HIGH);
  analogWrite(MOTOR_IN3, LOW);
  analogWrite(MOTOT_IN4, LOW);
}

// THIS METHOD MAKES THE CAR ACCELERATE
void Forward_ramp_up(void){
  digitalWrite(MOTOR_IN1, HIGH);
  digitalWrite(MOTOR_IN2, HIGH);
  digitalWrite(MOTOR_IN3, LOW);
  digitalWrite(MOTOR_IN4, LOW);

  for (int i=0; i<255; i++) { analogWrite(MOTOR_EN_1_2, i); delay(10); } } void Forward_ramp_down(void){ digitalWrite(MOTOR_IN1, HIGH); digitalWrite(MOTOR_IN2, LOW); for (int i=255; i>=0; i--) {
    analogWrite(MOTOR_EN_1_2, i);
    analogWrite(MOTOR_EN_3_4, i);
    delay(10);
  }

}

// THIS METHOD MAKES THE CAR MOVE BACKWARD
/*           
             (car)
               ||
               ||
               \/ 
*/
void moveBackward_Rev(void){
  analogWrite(MOTOR_EN_1_2, Speed);
  analogWrite(MOTOR_EN_3_4, Speed);
  analogWrite(MOTOR_IN1, HIGH);
  analogWrite(MOTOR_IN2, HIGH);
  analogWrite(MOTOR_IN3, LOW);
  analogWrite(MOTOT_IN4, LOW);
}

// THIS METHOD MAKES THE CAR DECELERATE
void Backward_ramp_up(void){
  digitalWrite(MOTOR_IN1, LOW);
  digitalWrite(MOTOR_IN2, LOW);
  digitalWrite(MOTOR_IN3, HIGH);
  digitalWrite(MOTOR_IN4, HIGH);

  for (int i=0; i<255; i++) { analogWrite(MOTOR_EN_1_2, i); delay(10); } } void Backward_ramp_down(void){ digitalWrite(MOTOR_IN1, LOW); digitalWrite(MOTOR_IN2, HIGH); for (int i=255; i>=0; i--) {
    analogWrite(MOTOR_EN_1_2, i);
    analogWrite(MOTOR_EN_3_4, i);
    delay(10);
  }

}

// THIS METHOD MAKES THE CAR TURN RIGHT
/*
                (car) -->       
*/
void turnRight(){
	analogWrite(MOTOR_IN1, slow);
  analogWrite(MOTOR_IN2, normal);
  analogWrite(MOTORIN_3, slow);
  analogWrite(MOTORIN_4, normal);

}

// THIS METHOD MAKES THE CAR TURN LEFT
/*
              <--(car)
*/
void turnLeft(){
	analogWrite(MOTOR_IN1, normal);
  analogWrite(MOTOR_IN2, slow);
  analogWrite(MOTORIN_3, normal);
  analogWrite(MOTORIN_4, slow);
}

// THIS METHOD IS INSTRUCTIONS FOR THE NORMAL ROUTE THE CAR SHOULD TRAVEL
void NormalRouteForCarOnCircut(void){

}

// THIS METHOD MAKES THE CAR RUN IN A CIRCLE
void GoInCircle(diameter){
  diameter = Math.random(<10);
  circumference = double((PI)diameter);
}

/*
`` METHODS FOR DRIVE CODE:
   BREAK, MOVEFORWARD_REV, FORWARD_RAMP_UP, MOVEBACKWARD_REV, BACKWARD_RAMP_UP,
   TURNRIGHT,TURN LEFT, GOINCIRCLE

   METHODS FOR VISION CODE:
   ULTRASONICSENSORSIGNALCHECK, RESPONSETOULTRASONICSENSORCHECK
*/
